@page "/Rodzaje-Kart-Instrukcyjnych"
@using GEORGE.Shared.Models
@using GEORGE.Shared.Class
@inject HttpClient Http
@using AntDesign

<h3>Rodzaje Kart Instrukcyjnych</h3>

<Button Type="primary" OnClick="@(ShowDialogAddNew)">
    Dodaj nowy rodzaj kartę instrukcyjną
</Button>
<Divider></Divider>

@if (rodzajeKartInstrukcyjnych == null)
{
    <p><em>Czekaj na załadowanie danych...</em></p>
}
else
{
    <ul>
        <Table TItem="RodzajeKartInstrukcyjnych" DataSource="@rodzajeKartInstrukcyjnych">
            <Column Title="ID" @bind-Field="@context.Id" Hidden />
            <Column Title="Numer Rodzaju Karty" @bind-Field="@context.NumerRodzajuKart" Sortable OnFilter="(a, b) => a == b" Filterable />
            <Column Title="Opis Rodzaju Karty" @bind-Field="@context.OpisRodzajuKart" Sortable />
            <Column Title="Nazwa Produktu" @bind-Field="@context.NazwaProduktu" Sortable OnFilter="(a, b) => a == b" Filterable />
            <Column Title="Nazwa Produktu cd" @bind-Field="@context.NazwaProduktu2" Sortable />
            <Column Title="Autor zmian" @bind-Field="@context.KtoZapisal" Sortable />

            <!-- Przykład kolumny dla daty z formatowaniem -->
            <Column Title="Data Zapisu" TData="DateTime" DataIndex="DataZapisu" Format="yyyy-MM-dd HH:mm:ss" Sortable />
            <!-- Przykład kolumny z niestandardowym renderowaniem komórki -->
            <ActionColumn Title="Akcja">
                <Popconfirm Title="Czy chcesz edytować pozycję?"
                            OnConfirm="()=> editRow(context.Id)"
                            OkText="Tak"
                            CancelText="Nie">
                    <a>Edytuj</a>
                </Popconfirm>
                <Popconfirm Title="Czy chcesz usunąć pozycję?"
                            OnConfirm="()=> deleteRow(context.Id)"
                            OkText="Tak"
                            CancelText="Nie">
                    <a style="color:red">Usuń</a>
                </Popconfirm>
            </ActionColumn>
        </Table>
    </ul>
}

<div class="modal fade @classShow" tabindex="-1" style="display: @display;">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <AntDesign.Form Model="@karty" Layout="FormLayout.Vertical" OnFinish="@HandleSubmit">
                    <AntDesign.FormItem Label="Rodzaj karty">
                        <AntDesign.Input @bind-Value="karty.NumerRodzajuKart" MaxLength="3"/>
                    </AntDesign.FormItem>
                    <AntDesign.FormItem Label="Opis rodzaju karty">
                        <AntDesign.Input @bind-Value="karty.OpisRodzajuKart" />
                    </AntDesign.FormItem>
                    <AntDesign.FormItem Label="Nazwa Produktu">
                        <AntDesign.Input @bind-Value="karty.NazwaProduktu" />
                    </AntDesign.FormItem>
                    <AntDesign.FormItem Label="Nazwa Produktu 2">
                        <AntDesign.Input @bind-Value="karty.NazwaProduktu2" />
                    </AntDesign.FormItem>
                    <AntDesign.FormItem Label="Kod Produktu">
                        <AntDesign.Input @bind-Value="karty.KodProduktu" />
                    </AntDesign.FormItem>
                    <AntDesign.FormItem Label="Kto Zapisał">
                        <AntDesign.Input @bind-Value="karty.KtoZapisal" />
                    </AntDesign.FormItem>
                    <AntDesign.FormItem Label="Ostatnia Zmiana">
                        <AntDesign.Input @bind-Value="karty.OstatniaZmiana" />
                    </AntDesign.FormItem>
                    <AntDesign.FormItem>
                        <AntDesign.Button Type="primary" @onclick="@HandleAddNew" HtmlType="submit">Zapisz</AntDesign.Button>
                        <AntDesign.Button @onclick="@HandleCancel">Anuluj</AntDesign.Button>
                    </AntDesign.FormItem>
                </AntDesign.Form>
            </div>
        </div>
    </div>
</div>

@code {
    private List<RodzajeKartInstrukcyjnych>? rodzajeKartInstrukcyjnych;
    private List<RodzajeKartInstrukcyjnych>? originalrodzajeKartInstrukcyjnych;

    private bool _visible = false;
    private string display = "none;";
    private string classShow = "";

    private long cid = -1;

    private RodzajeKartInstrukcyjnych karty = new RodzajeKartInstrukcyjnych();

    protected override async Task OnInitializedAsync()
    {

        try
        {
            rodzajeKartInstrukcyjnych = await Http.GetFromJsonAsync<List<RodzajeKartInstrukcyjnych>>("api/RodzajeKartInstrukcyjnych");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"******* Błąd {ex.Message}");  
        }
    }

    private async Task HandleSubmit()
    {

        if (_visible == false) return;

        HttpResponseMessage response;

        if (karty.Id == 0)
        {
            response = await Http.PostAsJsonAsync("api/RodzajeKartInstrukcyjnych", karty);
        }
        else
        {
            response = await Http.PutAsJsonAsync($"api/RodzajeKartInstrukcyjnych/{karty.Id}", karty);

            if (rodzajeKartInstrukcyjnych != null) originalrodzajeKartInstrukcyjnych = rodzajeKartInstrukcyjnych.DeepCopyList();
        }

        if (response.IsSuccessStatusCode)
        {
            if (karty.Id == 0)
            {
                rodzajeKartInstrukcyjnych.Add(karty); // Dodaj nowe karty do listy
            }
            else
            {
                // Znajdź istniejące karty i zaktualizuj je
                var index = rodzajeKartInstrukcyjnych.FindIndex(z => z.Id == karty.Id);

                if (index != -1)
                {
                    rodzajeKartInstrukcyjnych[index] = karty;
                }
            }

            _visible = false;
            karty = new RodzajeKartInstrukcyjnych(); // Zresetuj formularz

            await HideDialog();

            StateHasChanged(); // Odśwież widok
        }
        else
        {
            // Obsługa błędów
            Console.WriteLine("Błąd podczas zapisywania rodzaju karty - źródło RAZOR");
        }
    }

    public async Task deleteRow(long id)
    {
        if (rodzajeKartInstrukcyjnych == null) return;

        try
        {
            var response = await Http.DeleteAsync($"api/RodzajeKartInstrukcyjnych/{id}");

            if (response.IsSuccessStatusCode)
            {
                // Usunięcie rekordu z listy po pomyślnym usunięciu z serwera
                rodzajeKartInstrukcyjnych = rodzajeKartInstrukcyjnych.Where(r => r.Id != id).ToList();
                Console.WriteLine("Rekord został pomyślnie usunięty.");
            }
            else
            {
                Console.WriteLine($"Błąd podczas usuwania rekordu: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"******* Błąd {ex.Message}");
        }
    }


    public async Task editRow(long id)
    {
        //listOfData = listOfData.Where(d => d.Id != id).ToArray();
        if (rodzajeKartInstrukcyjnych == null) return;

        originalrodzajeKartInstrukcyjnych = rodzajeKartInstrukcyjnych.DeepCopyList();

        // Logika edycji
        if (_visible)
        {
            _visible = false;
            await HideDialog();
        }
        else
        {
            karty = new RodzajeKartInstrukcyjnych();

            var listOfData = rodzajeKartInstrukcyjnych.Where(d => d.Id == id).ToArray();

            // Pobierz karty na podstawie indeksu wiersza
            if (listOfData != null && listOfData.Count() > 0)
            {
                cid = id;

                karty = listOfData[0];

                _visible = true;

                await ShowDialog();
            }

            // Wyświetl numer zamówienia w konsoli
            Console.WriteLine(karty.NumerRodzajuKart);
        }

    }

    public async Task HandleAddNew()
    {
        await Task.Delay(1);

        _visible = true;
        // await HandleSubmit();
    }

    public async Task HandleCancel()
    {
        _visible = false;
        await HideDialog();
    }

    public async Task HandleCloseAdd()
    {
        _visible = false;
        await HideDialog();
        await HandleSubmit();
    }

    public async Task ShowDialogAddNew()
    {
        karty = new RodzajeKartInstrukcyjnych();
        cid = -1;

        display = "block";
        await Task.Delay(50);
        classShow = "show";
        StateHasChanged();
    }

    public async Task ShowDialog()
    {
        display = "block";
        await Task.Delay(50);
        classShow = "show";
        StateHasChanged();
    }

    private async Task HideDialog()
    {
        if (cid > 0 && rodzajeKartInstrukcyjnych != null)
        {
            rodzajeKartInstrukcyjnych = originalrodzajeKartInstrukcyjnych;
        }

        cid = -1;

        classShow = "";
        await Task.Delay(200);
        display = "none";

        StateHasChanged();
    }

}
